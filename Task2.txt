
DROP TABLE IF EXISTS doctors_examinations;
DROP TABLE IF EXISTS wards;
DROP TABLE IF EXISTS donations;

DROP TABLE IF EXISTS interns;
DROP TABLE IF EXISTS diseases;
DROP TABLE IF EXISTS professors;

DROP TABLE IF EXISTS sponsors;
DROP TABLE IF EXISTS departments;
DROP TABLE IF EXISTS doctors;
DROP TABLE IF EXISTS examinations;





CREATE TABLE departments (
	id INT PRIMARY KEY IDENTITY(1,1),
	name VARCHAR(255) UNIQUE NOT NULL,
	building INT NOT NULL CHECK(building BETWEEN 1 AND 5),
	financing INT NOT NULL DEFAULT 0 CHECK (financing >= 0)
);

CREATE TABLE doctors (
	id INT PRIMARY KEY IDENTITY(1,1),
	name VARCHAR(255) NOT NULL CHECK(name <> ''),
	surname VARCHAR(1000) NOT NULL CHECK(surname <> ''),
	premium INT NOT NULL DEFAULT 0 CHECK(premium > -1),
    salary INT NOT NULL CHECK(salary > 0)
);

CREATE TABLE examinations (
	id INT PRIMARY KEY IDENTITY(1,1),
    name VARCHAR(100) NOT NULL UNIQUE CHECK (name <> '')
);

CREATE TABLE sponsors (
	id INT PRIMARY KEY IDENTITY(1,1),
	name VARCHAR(100) NOT NULL UNIQUE
);


CREATE TABLE diseases (
	id INT PRIMARY KEY IDENTITY(1,1),
	name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE interns (
	id INT PRIMARY KEY IDENTITY(1,1),
	doctor_id INT NOT NULL REFERENCES doctors(id) ON DELETE CASCADE
);

CREATE TABLE professors (
	id INT PRIMARY KEY IDENTITY(1,1),
	doctor_id INT NOT NULL REFERENCES doctors(id) ON DELETE CASCADE
);



CREATE TABLE donations (
	id INT PRIMARY KEY IDENTITY(1,1),
    amount INT NOT NULL CHECK (amount > 0),
    don_date DATE NOT NULL,
    department_id INT NOT NULL REFERENCES departments(id) ON DELETE CASCADE,
    sponsor_id INT NOT NULL REFERENCES sponsors(id) ON DELETE CASCADE
);

CREATE TABLE wards (
    id INT PRIMARY KEY IDENTITY(1,1),
    name VARCHAR(20) NOT NULL UNIQUE CHECK (name <> ''),
    places INT NOT NULL CHECK (places > 0),
    department_id INT NOT NULL REFERENCES departments(id)
);

CREATE TABLE doctors_examinations (
	id INT PRIMARY KEY IDENTITY(1,1),
    doctor_id INT NOT NULL REFERENCES doctors(id) ON DELETE CASCADE,
	
    start_time TIME NOT NULL, CHECK (start_time > '08:00' AND start_time < '18:00'),
    end_time TIME NOT NULL, CHECK (end_time > start_time),
	ex_date DATE NOT NULL, CHECK (ex_date < GETDATE()),
	
	disease_id INT NOT NULL REFERENCES diseases(id),
    examination_id INT NOT NULL,
    ward_id INT NOT NULL REFERENCES wards(id)
);






INSERT INTO departments (name, building, financing) VALUES
  ('Cardiology', 4, 10000.00),
  ('Gastroenterology', 2, 15000.00),
  ('General Surgery', 3, 20000.00),
  ('Microbiology', 1, 25000.00),
  ('Neurology', 5, 30000.00),
  ('Oncology', 3, 12000.00),
  ('Chemistry', 2, 18000.00);

INSERT INTO doctors (name, surname, premium, salary) VALUES
  ('Anthony', 'Davis', 1300.00, 6000.00),
  ('Joshua', 'Bell', 1500.00, 6000.00),
  ('Michael', 'Johnson', 2000.00, 7000.00),
  ('Thomas', 'Gerada', 1200.00, 5500.00),
  ('John', 'Doe', 1800.00, 6500.00);

INSERT INTO examinations (name) VALUES
  ('Blood Test'),
  ('X-ray'),
  ('MRI'),
  ('Ultrasound');

INSERT INTO sponsors (name) VALUES
  ('Sponsor 1'),
  ('Sponsor 2'),
  ('Sponsor 3');


INSERT INTO diseases (name) VALUES 
  ('Flu'),
  ('Common Cold'),
  ('Pneumonia'),
  ('Astma');

INSERT INTO interns (doctor_id) VALUES 
  (1),
  (2);

INSERT INTO professors (doctor_id) VALUES 
  (3),
  (4);

INSERT INTO donations (amount, don_date, department_id, sponsor_id) VALUES
  (100, '2024-04-23', 1, 1),
  (200, '2024-04-22', 2, 1),
  (150, '2024-04-21', 4, 3),
  (350, '2024-04-21', 2, 2),
  (400, '2024-04-21', 3, 3),
  (50,  '2024-04-21', 4, 2),
  (300, '2024-04-20', 5, 3);

INSERT INTO wards (name, places, department_id) VALUES
  ('Ward A', 20, 1),
  ('Ward B', 5, 2),
  ('Ward C', 25, 3),
  ('Ward D', 8, 4),
  ('Ward E', 30, 5),
  ('Ward F', 13, 7);

INSERT INTO doctors_examinations (doctor_id, start_time, end_time, ex_date, examination_id, ward_id, disease_id) VALUES
  (1, '09:00', '14:00', '2024-04-26', 1, 1, 1),
  (1, '09:00', '14:00', '2024-03-22', 3, 3, 2),
  (1, '09:00', '14:00', '2024-04-19', 4, 5, 3),
  (2, '10:00', '15:00', '2024-04-24', 2, 6, 1),
  (2, '10:00', '15:00', '2024-03-21', 3, 2, 2),
  (2, '10:00', '15:00', '2024-04-22', 4, 4, 3),
  (3, '11:00', '16:00', '2024-04-11', 3, 5, 1),
  (3, '11:00', '16:00', '2024-03-15', 2, 4, 2),
  (3, '11:00', '16:00', '2024-04-17', 1, 6, 3),
  (4, '12:00', '17:00', '2024-04-18', 3, 3, 1),
  (4, '12:00', '17:00', '2024-04-19', 2, 2, 2),
  (4, '12:00', '17:00', '2024-03-20', 1, 5, 3);


-- Task 1

 --SELECT w.name, w.places 
 --FROM wards AS w
 --JOIN departments AS des
 --ON w.department_id = des.id
 --WHERE des.building = 5 
 --  AND w.places >= 5
 --  AND EXISTS (SELECT 1 
 --    FROM wards AS w
	-- JOIN departments AS des
	-- ON w.department_id = des.id
	-- WHERE des.building = 5	
	-- AND w.places > 15);



-- Task 2
 --SELECT DISTINCT des.name 
 --FROM doctors_examinations AS de
 --JOIN wards AS w
 --ON d_e.ward_id = w.id
 --JOIN departments AS des
 --ON w.department_id = des.id
 --WHERE (GETDATE() - de.ex_date) < '7 days';




-- Task 3
-- SELECT dis.name
-- FROM diseases as dis
-- WHERE dis.id NOT IN (
--    SELECT dis.id
--    FROM doctors_examinations AS de
--    JOIN diseases AS dis
--     ON de.disease_id = dis.id
--    GROUP BY dis.id);




-- Task 4
-- SELECT CONCAT(ds.name, ' ', ds.surname) AS full_name
-- FROM doctors AS ds
-- WHERE ds.id NOT IN (
   -- SELECT ds.id
   -- FROM doctors_examinations AS de
   -- JOIN doctors AS ds
    -- ON de.doctor_id = ds.id
   -- GROUP BY ds.id);





-- Task 5
-- SELECT des.name AS dep_name
-- FROM departments AS des
-- WHERE des.id NOT IN (
--    SELECT des.id
--    FROM doctors_examinations AS de
--    JOIN wards AS ws
--     ON de.ward_id = ws.id
--    JOIN departments AS des
--	 ON ws.department_id = des.id
--    GROUP BY des.id);



-- Task 6

-- SELECT ds.name AS doctor_name
-- FROM doctors AS ds
-- WHERE ds.id IN (
--    SELECT ins.doctor_id
--    FROM interns AS ins
--    JOIN doctors AS ds
--     ON ins.doctor_id = ds.id);



-- Task 7
-- SELECT ds.surname AS intern_surname
-- FROM doctors as ds
-- WHERE ds.id IN (
--    SELECT ins.doctor_id
--    FROM interns AS ins
--    JOIN doctors AS ds
--     ON ins.doctor_id = ds.id)
--  AND ds.salary > (
--    SELECT MIN(salary)
--    FROM doctors);
--   
-- SELECT name, salary
-- FROM doctors;
   
   



-- Task 8
-- SELECT ws.name, ws.places
-- FROM wards AS ws
-- WHERE ws.id NOT IN (
--    SELECT ws.id
--    FROM wards AS ws
--    JOIN departments AS des
--     ON ws.department_id = des.id
--    WHERE des.building = 3)
--  AND ws.places > (
--    SELECT MAX(ws.places)
--    FROM wards AS ws
--    JOIN departments AS des
--     ON ws.department_id = des.id
--    WHERE des.building = 3
--    );

-- SELECT ws.name, ws.places, des.name, des.building
-- FROM wards AS ws
-- JOIN departments AS des
--  ON ws.department_id = des.id
-- ORDER BY ws.places desc;



-- Task 9
-- SELECT surname
-- FROM doctors
-- WHERE id IN (
--    SELECT ds.id
--    FROM doctors_examinations AS d_e
--    JOIN doctors AS ds
--     ON d_e.doctor_id = ds.id



-- Task 10
-- SELECT * 
-- FROM departments AS des
-- WHERE des.id IN (
-- 	 SELECT des.id 
--      FROM doctors_examinations AS de
--      JOIN wards AS w
--        ON de.ward_id = w.id
--      JOIN departments AS des
--        ON w.department_id = des.id
--      JOIN doctors AS dos
--        ON de.doctor_id = dos.id
--      JOIN interns AS ins
--        ON ins.doctor_id = dos.id)
-- 	AND des.id IN (
-- 	 SELECT des.id 
--      FROM doctors_examinations AS de
--      JOIN wards AS w
--        ON de.ward_id = w.id
--      JOIN departments AS des
--        ON w.department_id = des.id
--      JOIN doctors AS dos
--        ON de.doctor_id = dos.id
--      JOIN professors AS ps
--        ON ps.doctor_id = dos.id);




-- Task 11
-- SELECT CONCAT(dos.name, ' ', dos.surname) AS doctor, des.name AS department
-- FROM doctors_examinations AS de
-- JOIN doctors AS dos
--   ON de.doctor_id = dos.id
-- JOIN wards AS ws
--   ON de.ward_id = ws.id
-- JOIN departments AS des
--   ON ws.department_id = des.id
-- WHERE des.financing >= 20000;



-- Task 12
--  SELECT dos.name AS doctor, des.name AS department
--  FROM doctors_examinations AS de
--  JOIN doctors AS dos
--    ON de.doctor_id = dos.id
--  JOIN wards AS ws
--    ON de.ward_id = ws.id
--  JOIN departments AS des
--    ON ws.department_id = des.id
--  WHERE dos.salary = (
--  	SELECT MAX(salary)
--  	FROM doctors
--  	);



-- Task 13
-- SELECT dis.name AS disease, COUNT(exs.id) AS count_examinations
-- FROM doctors_examinations AS de
-- JOIN diseases AS dis
--   ON de.disease_id = dis.id
-- JOIN examinations as exs
--   ON de.examination_id = exs.id
-- GROUP BY dis.name
